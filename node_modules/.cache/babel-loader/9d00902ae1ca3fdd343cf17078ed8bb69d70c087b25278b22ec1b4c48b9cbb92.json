{"ast":null,"code":"import { j as jsonParse, e as json } from './fetch-deps.js';\n\n/**\n * Determines if the given value is an object.\n */\nfunction isObject(value) {\n  return value != null && typeof value === 'object' && !Array.isArray(value);\n}\n\n/**\n * Deeply merges two given objects with the right one\n * having a priority during property assignment.\n */\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, _ref) => {\n    let [key, rightValue] = _ref;\n    const leftValue = result[key];\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n\n/**\n * Sets a given payload as a GraphQL response body.\n * @example\n * res(ctx.data({ user: { firstName: 'John' }}))\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\n */\nconst data = payload => {\n  return res => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      data: payload\n    });\n    return json(nextBody)(res);\n  };\n};\n\n/**\n * Sets a given list of GraphQL errors on the mocked response.\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\n * @see {@link https://mswjs.io/docs/api/context/errors}\n */\nconst errors = errorsList => {\n  return res => {\n    if (errorsList == null) {\n      return res;\n    }\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      errors: errorsList\n    });\n    return json(nextBody)(res);\n  };\n};\nexport { data as d, errors as e, mergeRight as m };","map":{"version":3,"names":["j","jsonParse","e","json","isObject","value","Array","isArray","mergeRight","left","right","Object","entries","reduce","result","key","rightValue","leftValue","concat","assign","data","payload","res","prevBody","body","nextBody","errors","errorsList","d","m"],"sources":["/Users/robinkhan/Library/Mobile Documents/com~apple~CloudDocs/projects/adopt-a-pet/node_modules/msw/lib/esm/errors-deps.js"],"sourcesContent":["import { j as jsonParse, e as json } from './fetch-deps.js';\n\n/**\n * Determines if the given value is an object.\n */\nfunction isObject(value) {\n    return value != null && typeof value === 'object' && !Array.isArray(value);\n}\n\n/**\n * Deeply merges two given objects with the right one\n * having a priority during property assignment.\n */\nfunction mergeRight(left, right) {\n    return Object.entries(right).reduce((result, [key, rightValue]) => {\n        const leftValue = result[key];\n        if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n            result[key] = leftValue.concat(rightValue);\n            return result;\n        }\n        if (isObject(leftValue) && isObject(rightValue)) {\n            result[key] = mergeRight(leftValue, rightValue);\n            return result;\n        }\n        result[key] = rightValue;\n        return result;\n    }, Object.assign({}, left));\n}\n\n/**\n * Sets a given payload as a GraphQL response body.\n * @example\n * res(ctx.data({ user: { firstName: 'John' }}))\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\n */\nconst data = (payload) => {\n    return (res) => {\n        const prevBody = jsonParse(res.body) || {};\n        const nextBody = mergeRight(prevBody, { data: payload });\n        return json(nextBody)(res);\n    };\n};\n\n/**\n * Sets a given list of GraphQL errors on the mocked response.\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\n * @see {@link https://mswjs.io/docs/api/context/errors}\n */\nconst errors = (errorsList) => {\n    return (res) => {\n        if (errorsList == null) {\n            return res;\n        }\n        const prevBody = jsonParse(res.body) || {};\n        const nextBody = mergeRight(prevBody, { errors: errorsList });\n        return json(nextBody)(res);\n    };\n};\n\nexport { data as d, errors as e, mergeRight as m };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,SAAS,EAAEC,CAAC,IAAIC,IAAI,QAAQ,iBAAiB;;AAE3D;AACA;AACA;AACA,SAASC,QAAQ,CAACC,KAAK,EAAE;EACrB,OAAOA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC;AAC9E;;AAEA;AACA;AACA;AACA;AACA,SAASG,UAAU,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC7B,OAAOC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,CAACC,MAAM,WAAwB;IAAA,IAAtB,CAACC,GAAG,EAAEC,UAAU,CAAC;IAC1D,MAAMC,SAAS,GAAGH,MAAM,CAACC,GAAG,CAAC;IAC7B,IAAIT,KAAK,CAACC,OAAO,CAACU,SAAS,CAAC,IAAIX,KAAK,CAACC,OAAO,CAACS,UAAU,CAAC,EAAE;MACvDF,MAAM,CAACC,GAAG,CAAC,GAAGE,SAAS,CAACC,MAAM,CAACF,UAAU,CAAC;MAC1C,OAAOF,MAAM;IACjB;IACA,IAAIV,QAAQ,CAACa,SAAS,CAAC,IAAIb,QAAQ,CAACY,UAAU,CAAC,EAAE;MAC7CF,MAAM,CAACC,GAAG,CAAC,GAAGP,UAAU,CAACS,SAAS,EAAED,UAAU,CAAC;MAC/C,OAAOF,MAAM;IACjB;IACAA,MAAM,CAACC,GAAG,CAAC,GAAGC,UAAU;IACxB,OAAOF,MAAM;EACjB,CAAC,EAAEH,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAEV,IAAI,CAAC,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,IAAI,GAAIC,OAAO,IAAK;EACtB,OAAQC,GAAG,IAAK;IACZ,MAAMC,QAAQ,GAAGtB,SAAS,CAACqB,GAAG,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,MAAMC,QAAQ,GAAGjB,UAAU,CAACe,QAAQ,EAAE;MAAEH,IAAI,EAAEC;IAAQ,CAAC,CAAC;IACxD,OAAOlB,IAAI,CAACsB,QAAQ,CAAC,CAACH,GAAG,CAAC;EAC9B,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,MAAM,GAAIC,UAAU,IAAK;EAC3B,OAAQL,GAAG,IAAK;IACZ,IAAIK,UAAU,IAAI,IAAI,EAAE;MACpB,OAAOL,GAAG;IACd;IACA,MAAMC,QAAQ,GAAGtB,SAAS,CAACqB,GAAG,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,MAAMC,QAAQ,GAAGjB,UAAU,CAACe,QAAQ,EAAE;MAAEG,MAAM,EAAEC;IAAW,CAAC,CAAC;IAC7D,OAAOxB,IAAI,CAACsB,QAAQ,CAAC,CAACH,GAAG,CAAC;EAC9B,CAAC;AACL,CAAC;AAED,SAASF,IAAI,IAAIQ,CAAC,EAAEF,MAAM,IAAIxB,CAAC,EAAEM,UAAU,IAAIqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}